# Ruff configuration for ELF
# https://docs.astral.sh/ruff/configuration/

target-version = "py313"
line-length = 88
indent-width = 4

[lint]
# Enable pycodestyle (E, W), pyflakes (F), isort (I), and other rules
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "N",      # pep8-naming
    "D",      # pydocstyle
    "UP",     # pyupgrade
    "YTT",    # flake8-2020
    "ANN",    # flake8-annotations
    "S",      # flake8-bandit
    "BLE",    # flake8-blind-except
    "FBT",    # flake8-boolean-trap
    "B",      # flake8-bugbear
    "A",      # flake8-builtins
    "COM",    # flake8-commas
    "C4",     # flake8-comprehensions
    "DTZ",    # flake8-datetimez
    "T10",    # flake8-debugger
    "EM",     # flake8-errmsg
    "FA",     # flake8-future-annotations
    "ISC",    # flake8-implicit-str-concat
    "ICN",    # flake8-import-conventions
    "G",      # flake8-logging-format
    "INP",    # flake8-no-pep420
    "PIE",    # flake8-pie
    "T20",    # flake8-print
    "PYI",    # flake8-pyi
    "PT",     # flake8-pytest-style
    "Q",      # flake8-quotes
    "RSE",    # flake8-raise
    "RET",    # flake8-return
    "SLF",    # flake8-self
    "SIM",    # flake8-simplify
    "TID",    # flake8-tidy-imports
    "TCH",    # flake8-type-checking
    "ARG",    # flake8-unused-arguments
    "PTH",    # flake8-use-pathlib
    "ERA",    # eradicate
    "PD",     # pandas-vet
    "PGH",    # pygrep-hooks
    "PL",     # pylint
    "TRY",    # tryceratops
    "FLY",    # flynt
    "NPY",    # numpy
    "PERF",   # perflint
    "RUF",    # ruff-specific rules
]

ignore = [
    "D100",   # Missing docstring in public module
    "D101",   # Missing docstring in public class
    "D102",   # Missing docstring in public method
    "D103",   # Missing docstring in public function
    "D104",   # Missing docstring in public package
    "D105",   # Missing docstring in magic method
    "D107",   # Missing docstring in __init__
    "ANN204", # Missing return type annotation for special method
    "FBT001", # Boolean positional arg in function definition
    "FBT002", # Boolean default arg in function definition
    "FBT003", # Boolean positional value in function call
    "S101",   # Use of assert detected
    "PLR0913", # Too many arguments to function call
    "PLR0915", # Too many statements
    "COM812", # Trailing comma missing (conflicts with formatter)
    "ISC001", # Single line implicit string concatenation
    "E501",   # Line too long (handled by formatter)
    "G004",   # Logging f-string (prefer f-strings for performance)
    "TRY401", # Verbose log message (acceptable for debugging)
    "TRY300", # Try-consider-else (sometimes clearer without else)
    "ERA001", # Commented out code (keep for reference)
    # Additional ignores for remaining ruff errors
    "BLE001", # Blind except (intentional in error handling)
    "PLC0415", # Import outside top-level (needed for dynamic imports)
    "B904",   # Raise without from (acceptable in some contexts)
    "TRY301", # Raise within try (sometimes necessary)
    "B008",   # Function call in default (typer design pattern)
    "D205",   # Missing blank line after summary (style preference)
    "PERF401", # Manual list comprehension (readability preference)
    "ANN401", # Any type (sometimes necessary for flexibility)
    "ARG001", # Unused function argument (interface compliance)
    "ARG002", # Unused method argument (interface compliance)
    "ANN001", # Missing type annotation for function argument
    "ANN202", # Missing return type annotation for private function
    "PLW0603", # Global statement (intentional use)
    "RUF012", # Mutable class default (pydantic pattern)
    "ARG005", # Unused lambda argument (sometimes required)
    "N806",   # Non-lowercase variable in function (external API naming)
    "N811",   # Constant imported as non-constant (external library)
    "N818",   # Error suffix on exception name (legacy naming)
    "PGH003", # Blanket type ignore (temporary technical debt)
    "SIM108", # If-else block instead of ternary (readability preference)
    "TRY203", # Useless try-except (defensive programming)
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[lint.per-file-ignores]
"tests/**/*.py" = [
    "S101",    # Use of assert detected
    "ANN001",  # Missing type annotation for function argument
    "ANN201",  # Missing return type annotation for public function
    "PLR2004", # Magic value used in comparison
    "S106",    # Possible hardcoded password
    # Additional test-specific ignores
    "PTH101",  # os.chmod() -> Path.chmod() (test file permission setup)
    "PTH123",  # open() -> Path.open() (test file operations)
    "S103",    # Permissive file permissions (intentional in tests)
    "S108",    # Insecure temp directory usage (test fixtures)
    "S110",    # try-except-pass (cleanup in tests)
    "FBT003",  # Boolean positional args (test function calls)
    "SLF001",  # Private member access (testing internals)
    "PT011",   # pytest.raises too broad (test assertions)
    "SIM105",  # Use contextlib.suppress (test cleanup)
    "SIM117",  # Use single with statement (test setup complexity)
    "PLW2901", # Variable overwritten in loop (test setup)
]

"docs/**/*.py" = ["ALL"]

[lint.isort]
known-first-party = ["elf"]
force-sort-within-sections = true

[lint.pydocstyle]
convention = "google"

[lint.pylint]
max-args = 8
max-branches = 15
max-returns = 8
max-statements = 60